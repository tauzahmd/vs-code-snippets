{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"@property getter" : {
		"prefix": "propertygetter",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"    return self._${1:name}",
			"$0"
		]
	},

	"@property getter/setter" : {
		"prefix": "propertysetter",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"    return self._${1:name}",
			"",
			"@${1:name}.setter",
			"def ${1:name}(self, $2):",
			"    self._${1:name} = $2",
			"$0"
		]
	},

	"class with init" : {
		"prefix": "classinit",
		"body": [
			"class ${1:Name}(object):",
			"",
			"    def __init__(self):",
			"        pass",
			"$0"
		]
	},
	
	"class with repr and string": {
		"prefix": "classreprstr",
		"body": [
			"class ${1:Name}(object):",
			"",
			"    def __repr__(self):",
			"        \"\"\"Representation of repr().\"\"\"",
			"        pass",
			"",
			"    def __str__(self):",
			"        \"\"\"Representation of str().\"\"\"",
			"        pass",
			"$0"
		],
		"description": ""
	},
	
	"class acting as sequence": {
		"prefix": "classsequence",
		"body": [
			"class ${1:Name}(object):",
			"",
			"    def __init__(self):",
			"        self._${2:data} = ${3:dict()}",
			"",
			"    def __getitem__(self, key):",
			"        \"\"\"Getter.\"\"\"",
			"        value = self._${2:data}[key]",
			"        return value",
			"",
			"    def __setitem__(self, key, value):",
			"        \"\"\"Setter.\"\"\"",
			"        self._${2:data}[key] = value",
			"",
			"    def __delitem__(self, key):",
			"        \"\"\"Delete Key\"\"\"",
			"        del self._${2:data}[key]",
			"",
			"    def __len__(self):",
			"        \"\"\"Length\"\"\"",
			"        return len(self._${2:data})",
			"",
			"    def insert(self):",
			"        pass",
			"$0"
		],
		"description": ""
	}

}
